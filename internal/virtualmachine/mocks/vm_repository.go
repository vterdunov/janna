// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import virtualmachine "github.com/vterdunov/janna/internal/virtualmachine"

// VMRepository is an autogenerated mock type for the VMRepository type
type VMRepository struct {
	mock.Mock
}

// IsVMExist provides a mock function with given fields: _a0, _a1, _a2
func (_m *VMRepository) IsVMExist(_a0 context.Context, _a1 string, _a2 string) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VMDeploy provides a mock function with given fields: _a0, _a1
func (_m *VMRepository) VMDeploy(_a0 context.Context, _a1 virtualmachine.VMDeployRequest) (virtualmachine.VMDeployResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 virtualmachine.VMDeployResponse
	if rf, ok := ret.Get(0).(func(context.Context, virtualmachine.VMDeployRequest) virtualmachine.VMDeployResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(virtualmachine.VMDeployResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, virtualmachine.VMDeployRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VMInfo provides a mock function with given fields: uuid
func (_m *VMRepository) VMInfo(uuid string) (virtualmachine.VMInfoResponse, error) {
	ret := _m.Called(uuid)

	var r0 virtualmachine.VMInfoResponse
	if rf, ok := ret.Get(0).(func(string) virtualmachine.VMInfoResponse); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(virtualmachine.VMInfoResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VMList provides a mock function with given fields: _a0
func (_m *VMRepository) VMList(_a0 virtualmachine.VMListRequest) ([]virtualmachine.VMListResponse, error) {
	ret := _m.Called(_a0)

	var r0 []virtualmachine.VMListResponse
	if rf, ok := ret.Get(0).(func(virtualmachine.VMListRequest) []virtualmachine.VMListResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]virtualmachine.VMListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(virtualmachine.VMListRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
